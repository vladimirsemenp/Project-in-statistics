pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
par(mfrow=c(2,2))
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,10),
pch=0)
points(1:12*50,v2*100,pch=1)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,15),
pch=0)
points(1:12*50,v2*100,pch=1)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,20),
pch=0)
points(1:12*50,v2*100,pch=1)
plot(1:12*50,v1,main="time vs linear size",
xlab="linear size",ylab="time",xlim=c(0,700),ylim=c(0,17),
pch=0)
points(1:12*50,v2*100,pch=1)
legend(locator(1),c("Rv2","Cv1*100"),pch=c(0,1))
m=matrix(,8,4)
m[]=0
for(j in 1:4){
for(i in 1:8){
g=createBMLGrid(0.2*j,r=round(50*i*i),c=round(50*i*i))
Rprof()
g1=crunBMLGrid(g,100)
Rprof(NULL)
m[i,j]=summaryRprof()$sampling.time
}
}
m=matrix(,5,4)
m[]=0
for(j in 1:4){
for(i in 1:5){
g=createBMLGrid(0.2*j,r=round(50*i*i),c=round(50*i*i))
Rprof()
g1=crunBMLGrid(g,100)
Rprof(NULL)
m[i,j]=summaryRprof()$sampling.time
}
}
m=matrix(,5,4)
m[]=0
for(j in 1:4){
for(i in 1:7){
g=createBMLGrid(0.2*j,r=round(50*i*i),c=round(50*i*i))
Rprof()
g1=crunBMLGrid(g,100)
Rprof(NULL)
m[i,j]=summaryRprof()$sampling.time
}
}
m=matrix(,7,4)
m[]=0
for(j in 1:4){
for(i in 1:7){
g=createBMLGrid(0.2*j,r=round(50*i*i),c=round(50*i*i))
Rprof()
g1=crunBMLGrid(g,100)
Rprof(NULL)
m[i,j]=summaryRprof()$sampling.time
}
}
m[,5]=1:7*1:7*50
m=matrix(,7,5)
m[]=0
for(j in 1:4){
for(i in 1:7){
g=createBMLGrid(0.2*j,r=50*i*i,c=50*i*i)
Rprof()
g1=crunBMLGrid(g,100)
Rprof(NULL)
m[i,j]=summaryRprof()$sampling.time
m[i,5]=50*i*i
}
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(1:5*1:5*50,v1,main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]+m[,5]*m[,5]))
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]+m[,5]*m[,5]))
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]+m[,5]:m[,5]))
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]+m[,5]:m[,5]))
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]+I(m[,5]*m[,5])))
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]+I(m[,5]:m[,5])))
}
m[,6]=m[,5]*m[,5]
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]+m[,6]))
}
m=matrix(,7,6)
m[]=0
for(j in 1:4){
for(i in 1:7){
g=createBMLGrid(0.2*j,r=50*i*i,c=50*i*i)
Rprof()
g1=crunBMLGrid(g,100)
Rprof(NULL)
m[i,j]=summaryRprof()$sampling.time
m[i,5]=50*i*i
}
}
m[,6]=m[,5]*m[,5]
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]+m[,6]))
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,6]))
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,6]/1000000))
}
m[,6]
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,6]/100000))
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~(m[,6]/100000) ))
}
m[,6]=m[,6]/100000
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,6] ))
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5] ))
}
m[,6]=m[,5]*m[,5]-mean(m[,5])*mean(m[,5])
m[,6]
m[,6]=( m[,5]*m[,5]-mean(m[,5])*mean(m[,5]) )10000
m[,6]=( m[,5]*m[,5]-mean(m[,5])*mean(m[,5]) )/10000
m[,6]=( m[,5]*m[,5]-mean(m[,5])*mean(m[,5]) )/10000
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]+m[,6] ))
}
m[,6]
m[,5]
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,6] ))
}
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,5]*m[,6] ))
}
m=matrix(,20,5)
m[]=0
for(j in 1:2){
for(i in 1:20){
g=createBMLGrid(0.2*j,r=50*i,c=50*i)
Rprof()
g1=crunBMLGrid(g,100)
Rprof(NULL)
m[i,j]=summaryRprof()$sampling.time
m[i,3]=50*i
}
}
m[,4]=m[,3]*m[,3]
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,8*8*50),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,3]*m[,4] ))
}
m[,4]=m[,3]*m[,3]
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,5],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,500),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,3] ))
}
m[,3]
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,500),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,3] ))
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,3] ))
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,3]*m[,3] ))
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,3]+I(m[,3]*m[,3]) ))
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,20),
pch=0)
abline(lm(m[,j]~m[,3]+I(m[,3]^2) ))
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,20),
pch=0)
lines(m[,3], fitted(fit)[order(m[,3])], type='b')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,20),
pch=0)
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
lines(m[,3], fitted(fit)[order(m[,3])], type='b')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,20),
pch=0)
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
lines(m[,3], fitted(fit)[order(m[,3])], type='b',col='red')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,20),
pch=0)
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
points(m[,3], fitted(fit)[order(m[,3])], type='o',col='red')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,4),
pch=0)
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
points(m[,3], fitted(fit)[order(m[,3])], type='o',col='red')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,4),
pch=0)
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
points(m[,3], fitted(fit)[order(m[,3])], type='n',col='red')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,4),
type="n")
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
points(m[,3], fitted(fit)[order(m[,3])], type='o',col='red')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,4),
type="n")
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
points(m[,3], fitted(fit)[order(m[,3])], type='o')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,4),
type="n")
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
points(m[,3], fitted(fit)[order(m[,3])], type='l')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size\n density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,4))
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
points(m[,3], fitted(fit)[order(m[,3])], type='l')
}
par(mfrow=c(1,2))
for(j in 1:2){
plot(m[,3],m[,j],main=c("time vs linear size density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,4))
fit=lm(m[,j]~m[,3]+I(m[,3]^2))
points(m[,3], fitted(fit)[order(m[,3])], type='l')
}
m=matrix(,20,5)
m[]=0
for(j in 1:4){
for(i in 1:20){
g=createBMLGrid(0.2*j,r=50*i,c=50*i)
Rprof()
g1=crunBMLGrid(g,100)
Rprof(NULL)
m[i,j]=summaryRprof()$sampling.time
m[i,3]=50*i
}
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size, density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,3))
fit=lm(m[,j]~m[,5]+I(m[,5]^2))
points(m[,5], fitted(fit)[order(m[,5])], type='l')
}
m=matrix(,20,5)
m[]=0
for(j in 1:4){
for(i in 1:20){
g=createBMLGrid(0.2*j,r=50*i,c=50*i)
Rprof()
g1=crunBMLGrid(g,100)
Rprof(NULL)
m[i,j]=summaryRprof()$sampling.time
m[i,5]=50*i
}
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size, density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,3))
fit=lm(m[,j]~m[,5]+I(m[,5]^2))
points(m[,5], fitted(fit)[order(m[,5])], type='l')
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size, density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,1.2))
fit=lm(m[,j]~m[,5]+I(m[,5]^2))
points(m[,5], fitted(fit)[order(m[,5])], type='l')
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size, density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,1.3))
fit=lm(m[,j]~m[,5]+I(m[,5]^2))
points(m[,5], fitted(fit)[order(m[,5])], type='l')
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size, density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1000),
ylim=c(0,1.4))
fit=lm(m[,j]~m[,5]+I(m[,5]^2))
points(m[,5], fitted(fit)[order(m[,5])], type='l')
}
par(mfrow=c(2,2))
for(j in 1:4){
plot(m[,5],m[,j],main=c("time vs linear size, density=",
as.character(j*0.2)), xlab="linear size",ylab="time",xlim=c(0,1050),
ylim=c(0,1.4))
fit=lm(m[,j]~m[,5]+I(m[,5]^2))
points(m[,5], fitted(fit)[order(m[,5])], type='l')
}
summary(fit)
