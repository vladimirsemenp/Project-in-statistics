{
    "data" : [
        "+ ",
        "            for(int j=c-1; j>0; j--){",
        "+ ",
        "            if(m(i,j)==0 & m(i,j-1)==1){",
        "+ ",
        "            m(i,j)=1;",
        "+ ",
        "            m(i,j-1)=4;",
        "+ ",
        "            }else{",
        "+ ",
        "            if(m(i,j)==4){m(i,j)=0;}",
        "+ ",
        "            }",
        "+ ",
        "            }",
        "+ ",
        "            }",
        "+ ",
        "            return m;",
        "+ ",
        "            }')",
        "> ",
        "",
        "> ",
        "# Rccp function to move cars up",
        "> ",
        "cppFunction('IntegerMatrix moveUpInC(IntegerMatrix m){",
        "+ ",
        "            int r=m.nrow();",
        "+ ",
        "            int c=m.ncol();",
        "+ ",
        "            for(int j=0; j<c; j++){",
        "+ ",
        "            for(int i=r-1; i>0; i--){",
        "+ ",
        "            if(m(i,j)==0 & m(i-1,j)==2){",
        "+ ",
        "            m(i,j)=2;",
        "+ ",
        "            m(i-1,j)=4;",
        "+ ",
        "            }else{",
        "+ ",
        "            if(m(i,j)==4){m(i,j)=0;}",
        "+ ",
        "            }",
        "+ ",
        "            }",
        "+ ",
        "            }",
        "+ ",
        "            return m;",
        "+ ",
        "            }')",
        "> ",
        "",
        "> ",
        "# Rccp function to wrap in the horizontal direction",
        "> ",
        "cppFunction('IntegerMatrix wrapRightInC(IntegerMatrix m){",
        "+ ",
        "            int r=m.nrow();",
        "+ ",
        "            int c=m.ncol();       ",
        "+ ",
        "            for(int i=0; i<r; i++){",
        "+ ",
        "            m(i,0)=m(i,c-2);",
        "+ ",
        "            m(i,c-1)=m(i,1);",
        "+ ",
        "            }",
        "+ ",
        "            return m;",
        "+ ",
        "            }')",
        "> ",
        "",
        "> ",
        "# Rccp function to wrap in the vertical direction",
        "> ",
        "cppFunction('IntegerMatrix wrapUpInC(IntegerMatrix m){",
        "+ ",
        "            int r=m.nrow();",
        "+ ",
        "            int c=m.ncol();       ",
        "+ ",
        "            for(int j=0; j<c; j++){",
        "+ ",
        "            m(0,j)=m(r-2,j);",
        "+ ",
        "            m(r-1,j)=m(1,j);",
        "+ ",
        "            }",
        "+ ",
        "            return m;",
        "+ ",
        "            }')",
        "> ",
        "",
        "> ",
        "# main function to move cars using Rccp",
        "> ",
        "crunBMLGrid=function(m,n=1){",
        "+ ",
        "  r=nrow(m)",
        "+ ",
        "  c=ncol(m)",
        "+ ",
        "  m1=addTwo(m)",
        "+ ",
        "  for(i in 1:n){",
        "+ ",
        "    m1=moveRightInC(m1)",
        "+ ",
        "    m1=wrapRightInC(m1)",
        "+ ",
        "    m1=moveUpInC(m1)",
        "+ ",
        "    m1=wrapUpInC(m1)",
        "+ ",
        "  }",
        "+ ",
        "  m[]=m1[1:r,1:c]",
        "+ ",
        "  m",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "######################## version 2 ########################",
        "> ",
        "# I change moveRightInC in this version",
        "> ",
        "",
        "> ",
        "# Rccp function to move cars right version 2",
        "> ",
        "cppFunction('IntegerMatrix moveRightInCv2(IntegerMatrix m){",
        "+ ",
        "            int r=m.nrow();",
        "+ ",
        "            int c=m.ncol();",
        "+ ",
        "            bool notMoved;",
        "+ ",
        "            /* notMoved indicates whether a car on the previous step moved */",
        "+ ",
        "            for(int i=0; i<r; i++){",
        "+ ",
        "            notMoved=true;",
        "+ ",
        "            for(int j=c-1; j>0; j--){",
        "+ ",
        "            if( notMoved & (m(i,j)==0) & (m(i,j-1)==1) ){",
        "+ ",
        "            m(i,j)=1;",
        "+ ",
        "            m(i,j-1)=0;",
        "+ ",
        "            notMoved=false;",
        "+ ",
        "            }else{",
        "+ ",
        "            notMoved=true;",
        "+ ",
        "            }",
        "+ ",
        "            }",
        "+ ",
        "            }",
        "+ ",
        "            return m;",
        "+ ",
        "            }')",
        "> ",
        "",
        "> ",
        "# main function",
        "> ",
        "crunBMLGridv2=function(m,n=1){",
        "+ ",
        "  r=nrow(m)",
        "+ ",
        "  c=ncol(m)",
        "+ ",
        "  m1=addTwo(m)",
        "+ ",
        "  for(i in 1:n){",
        "+ ",
        "    m1=moveRightInCv2(m1)",
        "+ ",
        "    m1=wrapRightInC(m1)",
        "+ ",
        "    m1=moveUpInC(m1)",
        "+ ",
        "    m1=wrapUpInC(m1)",
        "+ ",
        "  }",
        "+ ",
        "  m[]=m1[1:r,1:c]",
        "+ ",
        "  m",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "######################## version 3 ########################",
        "> ",
        "# I replace wrapMatrixInC by a code in R ",
        "> ",
        "",
        "> ",
        "crunBMLGridv3=function(m,n=1){",
        "+ ",
        "  r=nrow(m)",
        "+ ",
        "  c=ncol(m)",
        "+ ",
        "  m1=addTwo(m)",
        "+ ",
        "  for(i in 1:n){",
        "+ ",
        "    m1=moveRightInC(m1)",
        "+ ",
        "    m1[,1]=m1[,c+1]",
        "+ ",
        "    m1[,c+2]=m1[,2]",
        "+ ",
        "    m1=moveUpInC(m1)",
        "+ ",
        "    m1[1,]=m1[r+1,]",
        "+ ",
        "    m1[r+2,]=m1[2,]",
        "+ ",
        "  }",
        "+ ",
        "  m[]=m1[1:r,1:c]",
        "+ ",
        "  m",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "###########################################################",
        "> ",
        "# profiling",
        "> ",
        "###########################################################",
        "> ",
        "",
        "> ",
        "g=createBMLGrid(0.2,r=100,c=100)",
        "Error: could not find function \"createBMLGrid\"\n",
        "> ",
        "system.time(moveNaiveinC(g,100))",
        "Error in system.time(moveNaiveinC(g, 100)) : \n  could not find function \"moveNaiveinC\"\n",
        "Timing stopped at: 0 0 0 \n",
        "> ",
        "system.time(runBMLGrid(g,100))",
        "Error in system.time(runBMLGrid(g, 100)) : \n  could not find function \"runBMLGrid\"\n",
        "Timing stopped at: 0 0 0.001 \n",
        "> ",
        "all(crunBMLGrid(g,10)==runBMLGrid(g,10))",
        "Error in nrow(m) : object 'g' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGridv2(g,100000)",
        "Error in nrow(m) : object 'g' not found\n",
        "> ",
        "Rprof(NULL)",
        "> ",
        "summaryRprof()",
        "$by.self\n[1] self.time  self.pct   total.time total.pct \n<0 rows> (or 0-length row.names)\n\n$by.total\n[1] total.time total.pct  self.time  self.pct  \n<0 rows> (or 0-length row.names)\n\n$sample.interval\n[1] 0.02\n\n$sampling.time\n[1] 0\n\n",
        "> ",
        "###########################################################",
        "> ",
        "# old code from the assignment 2 ",
        "> ",
        "###########################################################",
        "> ",
        "",
        "> ",
        "#create random matrix with entries 0, 1, 2 corresponding",
        "> ",
        "#to none, red, blue cars",
        "> ",
        "#cars of different color have the same number",
        "> ",
        "createG=function(rowN, colN, redNum, blueNum){",
        "+ ",
        "  m=matrix(, rowN, colN);",
        "+ ",
        "  size=length(m);",
        "+ ",
        "  v=sample(1:size, redNum+blueNum, replace=FALSE);",
        "+ ",
        "  u=sample(v, blueNum, replace=FALSE);",
        "+ ",
        "  m[]=0; m[v]=1; m[u]=2;",
        "+ ",
        "  m",
        "+ ",
        "  #some assingments here are redundant but it doesn't",
        "+ ",
        "  #affect performance",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#adds two rows and two columns two a matrix",
        "> ",
        "#these new rows and columns repeat the first two",
        "> ",
        "addTwo=function(m){",
        "+ ",
        "  m2=matrix(,nrow(m)+2,ncol(m)+2);",
        "+ ",
        "  m2[1:nrow(m),1:ncol(m)]=m[,];",
        "+ ",
        "  m2[1:2+nrow(m),]=m2[1:2,];",
        "+ ",
        "  m2[,1:2+ncol(m)]=m2[,1:2];",
        "+ ",
        "  m2",
        "+ ",
        "  #rbind/cbind work worse here",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#this function performs n move for red cars and n",
        "> ",
        "#for blue cars",
        "> ",
        "#m is a matrix with 0, 1, 2",
        "> ",
        "#that correspond to none, red, blue cars",
        "> ",
        "moveN=function(m,n=1){",
        "+ ",
        "  colN=ncol(m);",
        "+ ",
        "  rowN=nrow(m);",
        "+ ",
        "  m=addTwo(m)",
        "+ ",
        "  m1=ifelse(m==1, TRUE, FALSE);",
        "+ ",
        "  m2=ifelse(m==2, TRUE, FALSE);",
        "+ ",
        "  #switch to Boolean matrices",
        "+ ",
        "  m3=mR1=mR2=matrix(, nrow(m), ncol(m));",
        "+ ",
        "  #preallocate",
        "+ ",
        "  for(i in 1:n){",
        "+ ",
        "    m3=m1 | m2;",
        "+ ",
        "    m1=moveRight(m1, m3, mR1, mR2, colN);",
        "+ ",
        "    m3=m1 | m2;",
        "+ ",
        "    m2=moveUp(m2, m3, mR1, mR2, rowN)",
        "+ ",
        "  };",
        "+ ",
        "  m=ifelse(m1, 1, ifelse(m2, 2, 0));",
        "+ ",
        "  m=m[1:(nrow(m)-2),1:(ncol(m)-2)];",
        "+ ",
        "  #switch back",
        "+ ",
        "  m",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#right move",
        "> ",
        "#m1 is a Boolean matrix of red cars",
        "> ",
        "#m2 is a Boolean matrix of any cars",
        "> ",
        "#mR1, mR2 are preallocated matrices - we don't want",
        "> ",
        "#to create them inside a loop",
        "> ",
        "#N - number of columns",
        "> ",
        "moveRight=function(m1, m2, mR1, mR2, N){",
        "+ ",
        "  mR1[,2:(N+2)]=m1[,1:(N+1)];",
        "+ ",
        "  mR2[,1:(N+1)]=m2[,2:(N+2)];",
        "+ ",
        "  m1=ifelse(mR2, m1, FALSE) | ifelse(m2, FALSE, mR1);",
        "+ ",
        "  m1[,1]=m1[,N+1]; m1[,N+2]=m1[,2];",
        "+ ",
        "  m1",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#move down in matrix, move up on plot",
        "> ",
        "#m1 is a Boolean matrix of blue cars",
        "> ",
        "#m2 is a Boolean matrix of any cars",
        "> ",
        "#mR1, mR2 are preallocated matrices - we don't want to create them ",
        "> ",
        "#inside a loop",
        "> ",
        "#N - number of rows",
        "> ",
        "moveUp=function(m1, m2, mR1, mR2, N){",
        "+ ",
        "  mR1[2:(N+2),]=m1[1:(N+1),];",
        "+ ",
        "  mR2[1:(N+1),]=m2[2:(N+2),];",
        "+ ",
        "  m1=ifelse(mR2,m1,FALSE) | ifelse(m2,FALSE,mR1);",
        "+ ",
        "  m1[1,]=m1[N+1,]; m1[N+2,]=m1[2,];",
        "+ ",
        "  m1",
        "+ ",
        "}",
        "> ",
        "#we could make moveUp just applying moveRight to ",
        "> ",
        "#transpose matrices but it would make moveUp slower",
        "> ",
        "",
        "> ",
        "#create structures",
        "> ",
        "createBMLGrid=function(density, r=100, c=100, ncars){",
        "+ ",
        "  if(missing(ncars)){",
        "+ ",
        "    redN=blueN=as.integer(density*r*c*0.5);",
        "+ ",
        "    m=createG(r, c, redN, blueN);",
        "+ ",
        "    structure(m, class=c(\"BMLGrid\", class(m)))",
        "+ ",
        "  }else{",
        "+ ",
        "    if(missing(density)){",
        "+ ",
        "      m=createG(r, c, ncars[1], ncars[2]);",
        "+ ",
        "      structure(m, class=c(\"BMLGrid\", class(m)))",
        "+ ",
        "    }else{",
        "+ ",
        "      print(\"Can't specify both density and ncars!\")",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#create structures",
        "> ",
        "runBMLGrid=function(g, numSteps=100){",
        "+ ",
        "  g=moveN(g, numSteps);",
        "+ ",
        "  structure(g, class=c(\"BMLGrid\", class(g)))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#function to measure the number of cars that moved,",
        "> ",
        "#that were blocked, and the average",
        "> ",
        "#velocity in each iteration between",
        "> ",
        "#start time and end time",
        "> ",
        "#returns matrix of these measurements",
        "> ",
        "speedBMLGrid=function(m, start=0, end=1){",
        "+ ",
        "  m2=m;",
        "+ ",
        "  w=matrix(, end-start, 8);",
        "+ ",
        "  w[,8]=(start+1):end",
        "+ ",
        "  redT=sum(ifelse(m==1, 1, 0));",
        "+ ",
        "  blueT=sum(ifelse(m==2, 1, 0));",
        "+ ",
        "  colnames(w)=c(\"Red speed\", \"Blue speed\", \"Red move\",",
        "+ ",
        "                \"Blue move\", \"Red block\", \"Blue block\", ",
        "+ ",
        "                \"Total speed\", \"Step number\");",
        "+ ",
        "  if(start!=0) { m=runBMLGrid(m,start) };",
        "+ ",
        "  for(i in (start+1):end){",
        "+ ",
        "    m2=runBMLGrid(m,1);",
        "+ ",
        "    w[i-start,5:6]=c(sum(ifelse(m==1 & m2==1, 1, 0)),",
        "+ ",
        "                     sum(ifelse(m==2 & m2==2, 1, 0)));",
        "+ ",
        "    m=m2",
        "+ ",
        "  };",
        "+ ",
        "  w[,3]=redT-w[,5]; w[,4]=blueT-w[,6]; ",
        "+ ",
        "  w[,1]=w[,3]/redT; w[,2]=w[,4]/blueT; ",
        "+ ",
        "  w[,7]=(w[,3]+w[,4])/(redT+blueT);",
        "+ ",
        "  w",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#plot dependence between total speed at the iteration",
        "> ",
        "#iterationStep and the density",
        "> ",
        "#numberPoints specifies number of points on the plot",
        "> ",
        "#in the interval (densitystart, densityend)",
        "> ",
        "vectorDensitySpeed=function(numberPoints, densitystart,",
        "+ ",
        "                            densityend, iterationStep){",
        "+ ",
        "  dens=(densityend-densitystart)/(numberPoints+1);",
        "+ ",
        "  v=vector(,numberPoints+5);",
        "+ ",
        "  for(i in 1:numberPoints){",
        "+ ",
        "    m=createBMLGrid(densitystart+dens*i);",
        "+ ",
        "    w=speedBMLGrid(m,iterationStep,iterationStep+10);",
        "+ ",
        "    v[i]=sum(w[,7])/10",
        "+ ",
        "  };",
        "+ ",
        "  for(i in numberPoints+1:5){",
        "+ ",
        "    m=createBMLGrid((i-numberPoints)/6);",
        "+ ",
        "    w=speedBMLGrid(m,iterationStep,iterationStep+10);",
        "+ ",
        "    v[i]=sum(w[,7])/10",
        "+ ",
        "  };",
        "+ ",
        "  plot(c(densitystart+1:numberPoints * dens,1:5/6), v,",
        "+ ",
        "       main=\"Speed vs Density\", ",
        "+ ",
        "       xlab=\"Density\", ylab=\"Speed\",);",
        "+ ",
        "  v",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#plot s3 classes",
        "> ",
        "plot.BMLGrid=function(x, submain=\"\"){",
        "+ ",
        "  image(x,col=c(\"white\",\"red\",\"blue\"),xaxt= \"n\", yaxt= \"n\", main=c(\"BMLGrid\\n\",submain) );",
        "+ ",
        "  arrows(0.05, 0.3, x1 = 0.95, y1 = 0.3, length = 0.7, col = \"blue\");",
        "+ ",
        "  arrows(0.05, 0.7, x1 = 0.95, y1 = 0.7, length = 0.7, col = \"blue\");",
        "+ ",
        "  arrows(0.7, 0.05, x1 = 0.7, y1 = 0.95, length = 0.7, col = \"red\");",
        "+ ",
        "  arrows(0.7, 0.05, x1 = 0.7, y1 = 0.95, length = 0.7, col = \"red\")",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "#summary s3 classes",
        "> ",
        "summary.BMLGrid=function(x){",
        "+ ",
        "  l=list();",
        "+ ",
        "  for(i in 1:7){",
        "+ ",
        "    l[[i]]=speedBMLGrid(x,start=0,end=10)[1:10,i]",
        "+ ",
        "  };",
        "+ ",
        "  names(l)=c(\"Red_speed\", \"Blue_speed\", \"Red_move\",",
        "+ ",
        "             \"Blue_move\", \"Red_block\", \"Blue_block\", ",
        "+ ",
        "             \"Total_speed\");",
        "+ ",
        "  l",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# #make plots for the report",
        "> ",
        "# v=vectorDensitySpeed(20,0.35,0.45,1800)",
        "> ",
        "# v1=createBMLGrid(0.3)",
        "> ",
        "# w1=speedBMLGrid(v1,end=800)",
        "> ",
        "# v2=createBMLGrid(0.5)",
        "> ",
        "# w2=speedBMLGrid(v2,end=800)",
        "> ",
        "# par(mfrow=c(1,2))",
        "> ",
        "# plot (c(0,800),c(0,1),type=\"n\",xlab=\"step number\",",
        "> ",
        "# ylab=\"speed\", main=\"Speed vs iteration \\n with density=0.3\") ",
        "> ",
        "# lines(w1[,8],w1[,1],col=\"red\",lwd=2.5)",
        "> ",
        "# lines(w1[,8],w1[,2],col=\"blue\",lwd=2.5)",
        "> ",
        "# plot (c(0,800),c(0,1),type=\"n\",xlab=\"step number\",",
        "> ",
        "# ylab=\"speed\", main=\"Speed vs iteration \\n with density=0.5\")",
        "> ",
        "# lines(w2[,8],w2[,1],col=\"red\",lwd=2.5)",
        "> ",
        "# lines(w2[,8],w2[,2],col=\"blue\",lwd=2.5)",
        "> ",
        "# ",
        "> ",
        "# #plot image",
        "> ",
        "#  g=createBMLGrid(0.2)",
        "> ",
        "#  g=runBMLGrid(g,1000)",
        "> ",
        "#  par(mfrow=c(1,2))",
        "> ",
        "#  plot(g,\"density=0.2\")",
        "> ",
        "#  g=createBMLGrid(0.5)",
        "> ",
        "#  g=runBMLGrid(g,1000)",
        "> ",
        "#  plot(g,\"density=0.5\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#now we compare this approach to a naive one",
        "> ",
        "#we write new functions that perform moves",
        "> ",
        "",
        "> ",
        "moveNaiveR=function(m){",
        "+ ",
        "  r=nrow(m);",
        "+ ",
        "  c=ncol(m);",
        "+ ",
        "  for(i in 1:r){",
        "+ ",
        "    for(j in c:2){",
        "+ ",
        "      if(m[i,j]==0 & m[i,j-1]==1){",
        "+ ",
        "        m[i,j]=1;",
        "+ ",
        "        m[i,j-1]=4",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  };",
        "+ ",
        "  m=ifelse(m==4, 0, m);",
        "+ ",
        "  m",
        "+ ",
        "}",
        "> ",
        "moveNaiveU=function(m){",
        "+ ",
        "  r=nrow(m);",
        "+ ",
        "  c=ncol(m);",
        "+ ",
        "  for(j in 1:c){",
        "+ ",
        "    for(i in r:2){",
        "+ ",
        "      if(m[i,j]==0 && m[i-1,j]==2){",
        "+ ",
        "        m[i,j]=2;",
        "+ ",
        "        m[i-1,j]=4",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  };",
        "+ ",
        "  m=ifelse(m==4, 0, m);",
        "+ ",
        "  m",
        "+ ",
        "}",
        "> ",
        "#we could use transpose",
        "> ",
        "#but it wouldn't be clear",
        "> ",
        "moveNaive=function(m,n){",
        "+ ",
        "  r=nrow(m);",
        "+ ",
        "  c=ncol(m);",
        "+ ",
        "  m1=addTwo(m)",
        "+ ",
        "  for(i in 1:n){",
        "+ ",
        "    m1=moveNaiveR(m1);",
        "+ ",
        "    m1[,1]=m1[,c+1];",
        "+ ",
        "    m1[,c+2]=m1[,2];",
        "+ ",
        "    m1=moveNaiveU(m1);",
        "+ ",
        "    m1[1,]=m1[r+1,];",
        "+ ",
        "    m1[r+2,]=m1[2,]",
        "+ ",
        "  };",
        "+ ",
        "  m[]=m1[1:r,1:c];",
        "+ ",
        "  m",
        "+ ",
        "}",
        "> ",
        "g=createBMLGrid(0.2,r=100,c=100)",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGridv2(g,100000)",
        "> ",
        "Rprof(NULL)",
        "> ",
        "summaryRprof()",
        "$by.self\n                 self.time self.pct total.time total.pct\n\"<Anonymous>\"         9.04    96.58       9.04     96.58\n\"crunBMLGridv2\"       0.22     2.35       9.36    100.00\n\"moveUpInC\"           0.04     0.43       4.54     48.50\n\"moveRightInCv2\"      0.02     0.21       3.92     41.88\n\"wrapRightInC\"        0.02     0.21       0.40      4.27\n\"wrapUpInC\"           0.02     0.21       0.28      2.99\n\n$by.total\n                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        9.36    100.00",
        "      0.22     2.35\n\"<Anonymous>\"          9.04     96.58      9.04    96.58\n\"moveUpInC\"            4.54     48.50      0.04     0.43\n\"moveRightInCv2\"       3.92     41.88      0.02     0.21\n\"wrapRightInC\"         0.40      4.27      0.02     0.21\n\"wrapUpInC\"            0.28      2.99      0.02     0.21\n\n$sample.interval\n[1] 0.02\n\n$sampling.time\n[1] 9.36\n\n",
        "> ",
        "g=createBMLGrid(0.5,r=100,c=100)",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGridv2(g,100000)",
        "> ",
        "Rprof(NULL)",
        "> ",
        "summaryRprof()",
        "$by.self\n                 self.time self.pct total.time total.pct\n\"<Anonymous>\"         5.84    94.50       5.84     94.50\n\"crunBMLGridv2\"       0.16     2.59       6.18    100.00\n\"moveRightInCv2\"      0.08     1.29       2.90     46.93\n\"wrapRightInC\"        0.06     0.97       0.24      3.88\n\"moveUpInC\"           0.02     0.32       2.50     40.45\n\"wrapUpInC\"           0.02     0.32       0.38      6.15\n\n$by.total\n                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        6.18    100.00",
        "      0.16     2.59\n\"<Anonymous>\"          5.84     94.50      5.84    94.50\n\"moveRightInCv2\"       2.90     46.93      0.08     1.29\n\"moveUpInC\"            2.50     40.45      0.02     0.32\n\"wrapUpInC\"            0.38      6.15      0.02     0.32\n\"wrapRightInC\"         0.24      3.88      0.06     0.97\n\n$sample.interval\n[1] 0.02\n\n$sampling.time\n[1] 6.18\n\n",
        "> ",
        "g=createBMLGrid(0.1,r=100,c=100)",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGridv2(g,100000)",
        "> ",
        "Rprof(NULL)",
        "> ",
        "summaryRprof()",
        "$by.self\n                 self.time self.pct total.time total.pct\n\"<Anonymous>\"         6.96    97.48       6.96     97.48\n\"crunBMLGridv2\"       0.12     1.68       7.14    100.00\n\"moveRightInCv2\"      0.04     0.56       3.44     48.18\n\"wrapRightInC\"        0.02     0.28       0.34      4.76\n\n$by.total\n                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        7.14    100.00      0.12     1.68\n\"<Anonymous>\"          6.96     97.48      6.96    97.48\n\"moveRightInCv2\"       3.44     48.18",
        "      0.04     0.56\n\"moveUpInC\"            3.06     42.86      0.00     0.00\n\"wrapRightInC\"         0.34      4.76      0.02     0.28\n\"wrapUpInC\"            0.18      2.52      0.00     0.00\n\n$sample.interval\n[1] 0.02\n\n$sampling.time\n[1] 7.14\n\n",
        "> ",
        "g=createBMLGrid(0.5,r=100,c=100)",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGridv2(g,100000)",
        "> ",
        "Rprof(NULL)",
        "> ",
        "summaryRprof()",
        "$by.self\n                 self.time self.pct total.time total.pct\n\"<Anonymous>\"         5.86    97.02       5.86     97.02\n\"crunBMLGridv2\"       0.06     0.99       6.04    100.00\n\"moveUpInC\"           0.04     0.66       2.88     47.68\n\"wrapUpInC\"           0.04     0.66       0.28      4.64\n\"moveRightInCv2\"      0.02     0.33       2.66     44.04\n\"wrapRightInC\"        0.02     0.33       0.16      2.65\n\n$by.total\n                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        6.04    100.00",
        "      0.06     0.99\n\"<Anonymous>\"          5.86     97.02      5.86    97.02\n\"moveUpInC\"            2.88     47.68      0.04     0.66\n\"moveRightInCv2\"       2.66     44.04      0.02     0.33\n\"wrapUpInC\"            0.28      4.64      0.04     0.66\n\"wrapRightInC\"         0.16      2.65      0.02     0.33\n\n$sample.interval\n[1] 0.02\n\n$sampling.time\n[1] 6.04\n\n",
        "> ",
        "g=createBMLGrid(0.7,r=100,c=100)",
        "> ",
        "system.time(moveNaiveinC(g,100))",
        "Error in system.time(moveNaiveinC(g, 100)) : \n  could not find function \"moveNaiveinC\"\n",
        "Timing stopped at: 0 0 0 \n",
        "> ",
        "system.time(runBMLGrid(g,100))",
        "   user  system elapsed \n  1.877   0.007   1.886 \n",
        "> ",
        "all(crunBMLGrid(g,10)==runBMLGrid(g,10))",
        "[1] TRUE\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGridv2(g,100000)",
        "> ",
        "Rprof(NULL)",
        "> ",
        "summaryRprof()",
        "$by.self\n                self.time self.pct total.time total.pct\n\"<Anonymous>\"        7.14    95.71       7.14     95.71\n\"crunBMLGridv2\"      0.14     1.88       7.46    100.00\n\"moveUpInC\"          0.08     1.07       4.48     60.05\n\"wrapUpInC\"          0.06     0.80       0.36      4.83\n\"wrapRightInC\"       0.04     0.54       0.28      3.75\n\n$by.total\n                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        7.46    100.00      0.14     1.88\n\"<Anonymous>\"          7.14     95.71      7.14",
        "    95.71\n\"moveUpInC\"            4.48     60.05      0.08     1.07\n\"moveRightInCv2\"       2.20     29.49      0.00     0.00\n\"wrapUpInC\"            0.36      4.83      0.06     0.80\n\"wrapRightInC\"         0.28      3.75      0.04     0.54\n\n$sample.interval\n[1] 0.02\n\n$sampling.time\n[1] 7.46\n\n",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGridv2(g,100000)",
        "> ",
        "Rprof(NULL)",
        "> ",
        "s=summaryRprof()",
        "> ",
        "s",
        "$by.self\n                self.time self.pct total.time total.pct\n\"<Anonymous>\"        7.54    97.67       7.54     97.67\n\"wrapUpInC\"          0.10     1.30       0.28      3.63\n\"crunBMLGridv2\"      0.06     0.78       7.72    100.00\n\"wrapRightInC\"       0.02     0.26       0.22      2.85\n\n$by.total\n                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        7.72    100.00      0.06     0.78\n\"<Anonymous>\"          7.54     97.67      7.54    97.67\n\"moveUpInC\"            4.46     57.77      0.00",
        "     0.00\n\"moveRightInCv2\"       2.70     34.97      0.00     0.00\n\"wrapUpInC\"            0.28      3.63      0.10     1.30\n\"wrapRightInC\"         0.22      2.85      0.02     0.26\n\n$sample.interval\n[1] 0.02\n\n$sampling.time\n[1] 7.72\n\n",
        "> ",
        "s$by.total",
        "                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        7.72    100.00      0.06     0.78\n\"<Anonymous>\"          7.54     97.67      7.54    97.67\n\"moveUpInC\"            4.46     57.77      0.00     0.00\n\"moveRightInCv2\"       2.70     34.97      0.00     0.00\n\"wrapUpInC\"            0.28      3.63      0.10     1.30\n\"wrapRightInC\"         0.22      2.85      0.02     0.26\n",
        "> ",
        "type(s$by.total)",
        "Error: could not find function \"type\"\n",
        "> ",
        "typeof(s$by.total)",
        "[1] \"list\"\n",
        "> ",
        "s$by.total[1,1]",
        "[1] 7.72\n",
        "> ",
        "s$by.total[\"moveUpInC\",]",
        "   total.time total.pct self.time self.pct\nNA         NA        NA        NA       NA\n",
        "> ",
        "m=s$by.total",
        "> ",
        "typeof(m)",
        "[1] \"list\"\n",
        "> ",
        "m",
        "                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        7.72    100.00      0.06     0.78\n\"<Anonymous>\"          7.54     97.67      7.54    97.67\n\"moveUpInC\"            4.46     57.77      0.00     0.00\n\"moveRightInCv2\"       2.70     34.97      0.00     0.00\n\"wrapUpInC\"            0.28      3.63      0.10     1.30\n\"wrapRightInC\"         0.22      2.85      0.02     0.26\n",
        "> ",
        "m$moveUpInC",
        "NULL\n",
        "> ",
        "m$\"moveUpInC\"",
        "NULL\n",
        "> ",
        "head(m)",
        "                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        7.72    100.00      0.06     0.78\n\"<Anonymous>\"          7.54     97.67      7.54    97.67\n\"moveUpInC\"            4.46     57.77      0.00     0.00\n\"moveRightInCv2\"       2.70     34.97      0.00     0.00\n\"wrapUpInC\"            0.28      3.63      0.10     1.30\n\"wrapRightInC\"         0.22      2.85      0.02     0.26\n",
        "> ",
        "m[0,]",
        "[1] total.time total.pct  self.time  self.pct  \n<0 rows> (or 0-length row.names)\n",
        "> ",
        "m[]",
        "                 total.time total.pct self.time self.pct\n\"crunBMLGridv2\"        7.72    100.00      0.06     0.78\n\"<Anonymous>\"          7.54     97.67      7.54    97.67\n\"moveUpInC\"            4.46     57.77      0.00     0.00\n\"moveRightInCv2\"       2.70     34.97      0.00     0.00\n\"wrapUpInC\"            0.28      3.63      0.10     1.30\n\"wrapRightInC\"         0.22      2.85      0.02     0.26\n",
        "> ",
        "m[1,]",
        "                total.time total.pct self.time self.pct\n\"crunBMLGridv2\"       7.72       100      0.06     0.78\n",
        "> ",
        "system.time(crunBMLGrid(g,100),100)",
        "   user  system elapsed \n  0.015   0.001   0.015 \n",
        "> ",
        "system.time(crunBMLGrid(g,100),1000)",
        "   user  system elapsed \n  0.016   0.001   0.016 \n",
        "> ",
        "system.time(crunBMLGrid(g,100),100000)",
        "   user  system elapsed \n  0.012   0.001   0.014 \n",
        "> ",
        "system.time(rep(crunBMLGrid(g,100),10000)",
        "+ ",
        "sdfsdf",
        "Error: unexpected symbol in:\n\"system.time(rep(crunBMLGrid(g,100),10000)\nsdfsdf\"\n",
        "> ",
        "system.time(rep(crunBMLGrid(g,100),10000))",
        "   user  system elapsed \n  0.362   0.233   0.627 \n",
        "> ",
        "g=createBMLGrid(0.5,r=1000,c=1000)",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGrid(g,100000)",
        "\n",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGrid(g,1000)",
        "> ",
        "Rprof(NULL)",
        "> ",
        "summaryRprof()",
        "$by.self\n              self.time self.pct total.time total.pct\n\"<Anonymous>\"     10.24    98.65      10.24     98.65\n\"addTwo\"           0.08     0.77       0.10      0.96\n\"crunBMLGrid\"      0.04     0.39      10.38    100.00\n\"matrix\"           0.02     0.19       0.02      0.19\n\n$by.total\n               total.time total.pct self.time self.pct\n\"crunBMLGrid\"       10.38    100.00      0.04     0.39\n\"<Anonymous>\"       10.24     98.65     10.24    98.65\n\"moveRightInC\"       6.38     61.46      0.00     0.00\n\"moveUpInC\"   ",
        "       3.44     33.14      0.00     0.00\n\"wrapRightInC\"       0.30      2.89      0.00     0.00\n\"wrapUpInC\"          0.12      1.16      0.00     0.00\n\"addTwo\"             0.10      0.96      0.08     0.77\n\"matrix\"             0.02      0.19      0.02     0.19\n\n$sample.interval\n[1] 0.02\n\n$sampling.time\n[1] 10.38\n\n",
        "> ",
        "plot(g)",
        "> ",
        "plot(g)",
        "> ",
        "g=createBMLGrid(0.5,r=500,c=500)",
        "> ",
        "Rprof()",
        "> ",
        "#g=moveNaive(g,100)",
        "> ",
        "#g=runBMLGrid(g,100)",
        "> ",
        "g=crunBMLGrid(g,1000)",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        2,
        0,
        1,
        3,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ]
}